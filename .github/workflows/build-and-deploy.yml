name: Build and Deploy Microservices

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [order-service, product-service, payment-service, api-gateway]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./services/${{ matrix.service }}
        file: ./services/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Update Kubernetes manifests with new image tags
      run: |
        # Get the commit SHA for image tagging
        COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        IMAGE_TAG="${BRANCH_NAME}-${COMMIT_SHA}"
        
        # Update image tags in Kubernetes manifests
        sed -i "s|order-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/order-service:${IMAGE_TAG}|g" k8s/microservices.yaml
        sed -i "s|product-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/product-service:${IMAGE_TAG}|g" k8s/microservices.yaml
        sed -i "s|payment-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/payment-service:${IMAGE_TAG}|g" k8s/microservices.yaml
        sed -i "s|api-gateway:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${IMAGE_TAG}|g" k8s/api-gateway.yaml
        
        # Update imagePullPolicy to Always for remote images
        sed -i "s|imagePullPolicy: Never|imagePullPolicy: Always|g" k8s/microservices.yaml
        sed -i "s|imagePullPolicy: Never|imagePullPolicy: Always|g" k8s/api-gateway.yaml

    - name: Create namespace
      run: |
        kubectl apply -f k8s/namespace.yaml

    - name: Deploy PostgreSQL and RabbitMQ
      run: |
        kubectl apply -f k8s/postgres-configmap.yaml
        kubectl apply -f k8s/postgres-secret.yaml
        kubectl apply -f k8s/postgres-pvc.yaml
        kubectl apply -f k8s/postgres-deployment.yaml
        kubectl apply -f k8s/postgres-service.yaml
        kubectl apply -f k8s/rabbitmq.yaml

    - name: Wait for databases to be ready
      run: |
        echo "Waiting for PostgreSQL databases to be ready..."
        kubectl wait --for=condition=ready pod -l app=postgres-order -n microservices-demo --timeout=300s || true
        kubectl wait --for=condition=ready pod -l app=postgres-product -n microservices-demo --timeout=300s || true
        kubectl wait --for=condition=ready pod -l app=postgres-payment -n microservices-demo --timeout=300s || true
        
        echo "Waiting for RabbitMQ to be ready..."
        kubectl wait --for=condition=ready pod -l app=rabbitmq -n microservices-demo --timeout=300s || true

    - name: Deploy microservices
      run: |
        kubectl apply -f k8s/microservices.yaml
        kubectl apply -f k8s/api-gateway.yaml

    - name: Wait for deployment to complete
      run: |
        kubectl rollout status deployment/order-service -n microservices-demo --timeout=300s
        kubectl rollout status deployment/product-service -n microservices-demo --timeout=300s
        kubectl rollout status deployment/payment-service -n microservices-demo --timeout=300s
        kubectl rollout status deployment/api-gateway -n microservices-demo --timeout=300s

    - name: Get deployment status
      run: |
        echo "=== Deployment Status ==="
        kubectl get pods -n microservices-demo
        echo ""
        echo "=== Services ==="
        kubectl get services -n microservices-demo
        echo ""
        echo "=== Ingress (if any) ==="
        kubectl get ingress -n microservices-demo || echo "No ingress found"

  cleanup:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'pull_request'
    
    steps:
    - name: Cleanup PR images
      run: |
        echo "Cleanup step for PR images (implement if needed)"
        # Add cleanup logic for PR-specific images if required
